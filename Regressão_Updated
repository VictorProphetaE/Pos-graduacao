import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn import metrics
from google.colab import files

# Configurações iniciais
np.set_printoptions(threshold=None, precision=2)
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 500)
pd.set_option('float_format', '{:.2f}'.format)

def load_excel_file(sheet_index):
    uploaded = files.upload()
    file_path = next(iter(uploaded.keys()))
    df = pd.read_excel(file_path, sheet_name=sheet_index)
    return df

def perform_linear_regression(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
    regressor = LinearRegression()
    regressor.fit(X_train, y_train)
    y_pred = regressor.predict(X_test)
    return y_test, y_pred

def print_regression_metrics(y_test, y_pred):
    print("Mean Absolute Error:", metrics.mean_absolute_error(y_test, y_pred))
    print("Mean Squared Error:", metrics.mean_squared_error(y_test, y_pred))
    print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

def plot_scatter(x, y, title, x_label, y_label):
    plt.scatter(x, y, label='Dados')
    plt.title(title)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.legend()
    plt.show()

# Exemplo 1: Regressão linear simples
df1 = load_excel_file(1)
Idade = df1['Idade em mês']
Total_Leite = df1['Leite mensal']
plot_scatter(Total_Leite, Idade, 'Idade vs Leite produzido', 'Total Leite [Litros]', 'Idade [Mês]')

X_simple = df1[['Leite mensal']]
y_simple = df1['Idade em mês']
y_test_simple, y_pred_simple = perform_linear_regression(X_simple, y_simple)
df2 = pd.DataFrame({'Atual': y_test_simple, 'Predição': y_pred_simple})
print(df2)
print_regression_metrics(y_test_simple, y_pred_simple)

# Exemplo 2: Regressão linear múltipla
df3 = load_excel_file(3)
X_multiple = df3[['leite mensal', 'Idade das vacas']]
y_lactose = df3['lactose']
y_proteina = df3['proteina']
y_gordura = df3['gordura']
y_solidos = df3['sólidos']

# Manipulação de dados ausentes
imputer = SimpleImputer(strategy='mean')
X_multiple_imputed = imputer.fit_transform(X_multiple)

# Normalização dos dados
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X_multiple_imputed)

y_test_lactose, y_pred_lactose = perform_linear_regression(X_scaled, y_lactose)
y_test_proteina, y_pred_proteina = perform_linear_regression(X_scaled, y_proteina)
y_test_gordura, y_pred_gordura = perform_linear_regression(X_scaled, y_gordura)
y_test_solidos, y_pred_solidos = perform_linear_regression(X_scaled, y_solidos)

df_lactose = pd.DataFrame({'Actual': y_test_lactose, 'Predicted': y_pred_lactose})
df_proteina = pd.DataFrame({'Actual': y_test_proteina, 'Predicted': y_pred_proteina})
df_gordura = pd.DataFrame({'Actual': y_test_gordura, 'Predicted': y_pred_gordura})
df_solidos = pd.DataFrame({'Actual': y_test_solidos, 'Predicted': y_pred_solidos})

print(df_lactose)
print(df_proteina)
print(df_gordura)
print(df_solidos)

print("Metrics for lactose:")
print_regression_metrics(y_test_lactose, y_pred_lactose)
print("Metrics for proteina:")
print_regression_metrics(y_test_proteina, y_pred_proteina)
print("Metrics for gordura:")
print_regression_metrics(y_test_gordura, y_pred_gordura)
print("Metrics for solidos:")
print_regression_metrics(y_test_solidos, y_pred_solidos)

# Validação cruzada
cv_scores = cross_val_score(LinearRegression(), X_scaled, y_lactose, cv=5, scoring='neg_mean_squared_error')
rmse_scores = np.sqrt(-cv_scores)
print("Cross-Validation RMSE Scores for lactose:")
print(rmse_scores)
