# -*- coding: utf-8 -*-
"""Main program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XcX5EGe4bjfJZ9yzpiDUrvVAc0kSBPpm

# Regressão linear simples
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn import metrics

np.set_printoptions(threshold=None, precision=2)
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 500)
pd.set_option('precision', 2)

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 1)

df.head()

df = df.sample(n=30)
Idade = df['Idade em mês']
Total_Leite = df['Leite mensal']
plt.scatter(Total_Leite, Idade,label='Dados')
plt.title('idade vs leite produzido')
plt.xlabel('Total Leite[Litros]')
plt.ylabel('Idade[Mês]')
plt.legend()

X = df.iloc[:,:-1].values
y = df.iloc[:,1].values
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.25, random_state=0)

regresao = LinearRegression()
regresao.fit(X_train, y_train)

print("interceptação:",regresao.intercept_)
print("Coeficiente:",regresao.coef_)

y_pred = regresao.predict(X_test)
df2 = pd.DataFrame({'Atual': y_test, 'Predição': y_pred})
df2.head()

print("Erro médio absoluto:", metrics.mean_absolute_error(y_test, y_pred))
print("Erro médio quadrático:",metrics.mean_squared_error(y_test, y_pred))
print("Raiz quadrada média do erro:",np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn import metrics

np.set_printoptions(threshold=None, precision=2)
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 500)
pd.set_option('precision', 2)

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 0)

df.head()

"""# regressão linear mult"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn import metrics

np.set_printoptions(threshold=None, precision=2)
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 500)
pd.set_option('precision', 2)

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 3)

df

df.describe()

X = df[['leite mensal', 'Idade das vacas']]
y = df['lactose']
y1 = df['proteina']
y2 = df['gordura']

X1 = df[['leite mensal', 'Idade das vacas','lactose','proteina','gordura']]
y3 = df['sólidos']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y1, test_size=0.2, random_state=0)

X_train2, X_test2, y_train2, y_test2 = train_test_split(X, y2, test_size=0.2, random_state=0)

X_train3, X_test3, y_train3, y_test3 = train_test_split(X1, y3, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

regressor1 = LinearRegression()
regressor1.fit(X_train1, y_train1)

regressor2 = LinearRegression()
regressor2.fit(X_train2, y_train2)

regressor3 = LinearRegression()
regressor3.fit(X_train3, y_train3)

coeff_df = pd.DataFrame(regressor.coef_, X.columns, columns=['Coefficient'])
coeff_df

coeff_df = pd.DataFrame(regressor1.coef_, X.columns, columns=['Coefficient'])
coeff_df

coeff_df = pd.DataFrame(regressor2.coef_, X.columns, columns=['Coefficient'])
coeff_df

y_pred = regressor.predict(X_test)
y_pred1 = regressor1.predict(X_test1)
y_pred2 = regressor2.predict(X_test2)

df2 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df3 = pd.DataFrame({'Actual': y_test1, 'Predicted': y_pred1})
df4 = pd.DataFrame({'Actual': y_test2, 'Predicted': y_pred2})
df2

df3

df4

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test1, y_pred1))
print('Mean Squared Error:', metrics.mean_squared_error(y_test1, y_pred1))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test1, y_pred1)))

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test2, y_pred2))
print('Mean Squared Error:', metrics.mean_squared_error(y_test2, y_pred2))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test2, y_pred2)))
