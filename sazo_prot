# -*- coding: utf-8 -*-
"""Sazo prot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nicJAW3XK6rFStf0QQmZr77U-nCE-D7R
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 2)
df.head()

df.set_index('Meses',inplace=True)
df.head()

df.plot()

timeseries = df['Média proteina mensal']
timeseries.rolling(3).mean().plot(label='3 Média móvel do mês ')
timeseries.rolling(3).std().plot(label='3 Padrão de Rolagem do Mês ')
timeseries.plot()
plt.legend()

from statsmodels.tsa.seasonal import seasonal_decompose
decomposition = seasonal_decompose(df['Média proteina mensal'], freq=3)  
figure = plt.figure()  
figure = decomposition.plot()  
figure.set_size_inches(15, 8)

from statsmodels.tsa.stattools import adfuller
test_result = adfuller(df['Média proteina mensal'])
print ('ADF Teste:')
labels = ['ADF Estatística','valor p','Nº de atrasos usados','Número de observações usados']

for value,label in zip(test_result,labels):
    print(label+':'+str(value))
if test_result[1] <= 0.15:
    print("Rejeitar hipótese nula e os dados são estacionários")
else:
    print("Falha ao rejeitar H0, portanto, os dados não são estacionários")

def check_adf(time_series):
    test_result = adfuller(time_series)
    print ('ADF Teste:')
    labels = ['ADF Estatística','valor p','Nº de atrasos usados','Número de observações usados']
    for value,label in zip(test_result,labels):
        print(label+':'+str(value))
    if test_result [1] <= 0.15:
        print ("Rejeitar hipótese nula e os dados são estacionários")
    else:
        print ("Falha ao rejeitar H0, portanto, os dados não são estacionários")

df ['Primeira proteina Diferença'] = df['Média proteina mensal'] - df['Média proteina mensal'].shift(1)
check_adf(df['Primeira proteina Diferença'].dropna())

df['Primeira proteina Diferença'].plot()

from statsmodels.graphics.tsaplots import plot_acf
fig_first = plot_acf(df["Primeira proteina Diferença"].dropna())
