# -*- coding: utf-8 -*-
"""Sazionalidade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18W8JaSajMtCZT6eXTb4GwF8WzatugwPC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#import seaborn as sns
import statsmodels.api as sm
from statsmodels.graphics import tsaplots

#from sklearn.model_selection import train_test_split
#from sklearn import preprocessing
#from sklearn.linear_model import LinearRegression
#from sklearn.model_selection import GridSearchCV
#from sklearn.ensemble import RandomForestRegressor

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 0)
df.head()

df.set_index('Meses',inplace=True)
df.head()

df.plot()



timeseries = df['Média leite mensal']
timeseries.rolling(3).mean().plot(label='3 Média móvel do mês')
timeseries.rolling(3).std().plot(label='3 Desvio padrão do mês')
timeseries.plot()
plt.legend()

from statsmodels.tsa.seasonal import seasonal_decompose
decomposition = seasonal_decompose(df['Média leite mensal'], freq=4)  
figure = plt.figure()  
figure = decomposition.plot()  
figure.set_size_inches(15, 8)

from statsmodels.tsa.stattools import adfuller
test_result = adfuller(df['Média leite mensal'])
print ('ADF Teste:')
labels = ['ADF Estatística','valor p','Nº de atrasos usados','Número de observações usados']

for value,label in zip(test_result,labels):
    print(label+':'+str(value))
if test_result[1] <= 0.05:
    print("Rejeitar hipótese nula e os dados são estacionários")
else:
    print("Falha ao rejeitar H0, portanto, os dados não são estacionários")

from statsmodels.tsa.stattools import adfuller

print(" > Is the data stationary ?")
dftest = adfuller(df['Média leite mensal'], autolag='AIC')
print("Test statistic = {:.3f}".format(dftest[0]))
print("P-value = {:.3f}".format(dftest[1]))
print("Critical values :")
for k, v in dftest[4].items():
    print("\t{}: {} - The data is {} stationary with {}% confidence".format(k, v, "not" if v<dftest[0] else "", 100-int(k[:-1])))

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

fig, ax = plt.subplots(2, figsize=(12,6))
ax[0] = plot_acf(df['Média leite mensal'].dropna(), ax=ax[0], lags=20)
ax[1] = plot_pacf(df['Média leite mensal'].dropna(), ax=ax[1], lags=20)

fig, ax = plt.subplots(2, sharex=True, figsize=(12,6))
ax[0].plot(df['Média leite mensal'].values);
ax[0].set_title("Raw data");
ax[1].plot(np.log(df['Média leite mensal'].values));
ax[1].set_title("Logged data (deflated)");
ax[1].set_ylim(0, 15);

fig, ax = plt.subplots(2, 2, figsize=(12,6))
first_diff = (np.log(df['Média leite mensal'])- np.log(df['Média leite mensal']).shift()).dropna()
ax[0, 0] = plot_acf(np.log(df['Média leite mensal']), ax=ax[0, 0], lags=30, title="ACF - Logged data")
ax[1, 0] = plot_pacf(np.log(df['Média leite mensal']), ax=ax[1, 0], lags=30, title="PACF - Logged data")
ax[0, 1] = plot_acf(first_diff , ax=ax[0, 1], lags=30, title="ACF - Differenced Logged data")
ax[1, 1] = plot_pacf(first_diff, ax=ax[1, 1], lags=30, title="PACF - Differenced Logged data")

from statsmodels.tsa.stattools import kpss

print(" > Is the data stationary ?")
dftest = kpss(np.log(df['Média leite mensal']), 'ct')
print("Test statistic = {:.3f}".format(dftest[0]))
print("P-value = {:.3f}".format(dftest[1]))
print("Critical values :")
for k, v in dftest[3].items():
    print("\t{}: {}".format(k, v))

def check_adf(time_series):
    test_result = adfuller(time_series)
    print ('ADF Teste:')
    labels = ['ADF Estatística','valor p','Nº de atrasos usados','Número de observações usados']
    for value,label in zip(test_result,labels):
        print(label+':'+str(value))
    if test_result [1] <= 0.05:
        print ("Rejeitar hipótese nula e os dados são estacionários")
    else:
        print ("Falha ao rejeitar H0, portanto, os dados não são estacionários")

df ['Primeira Leite Diferença'] = df['Média leite mensal'] - df['Média leite mensal'].shift(1)
check_adf(df['Primeira Leite Diferença'].dropna())

df['Primeira Leite Diferença'].plot()

fig, ax = plt.subplots(2, sharex=True, figsize=(12,6))
ax[0].plot(df);
ax[0].set_title("Raw data");
ax[1].plot(np.log(df));
ax[1].set_title("Logged data (deflated)");
ax[1].set_ylim(0, 15);

fig, ax = plt.subplots(2, 2, figsize=(12,6))
first_diff = (np.log(df)- np.log(df).shift()).dropna()
ax[0, 0] = plot_acf(np.log(df), ax=ax[0, 0], lags=20, title="ACF - Logged data")
ax[1, 0] = plot_pacf(np.log(df), ax=ax[1, 0], lags=20, title="PACF - Logged data")
ax[0, 1] = plot_acf(first_diff , ax=ax[0, 1], lags=20, title="ACF - Differenced Logged data")
ax[1, 1] = plot_pacf(first_diff, ax=ax[1, 1], lags=20, title="PACF - Differenced Logged data")

from statsmodels.graphics.tsaplots import plot_acf
fig_first = plot_acf(df["Primeira Leite Diferença"].dropna(), lags= 31)

model = sm.tsa.statespace.SARIMAX(df['Média leite mensal'],order=(0,1,0),seasonal_order=(1,1,1,1))
ARIMAresult = model.fit()
print(ARIMAresult.summary())

df['dados de previsão'] = ARIMAresult.predict(start = 29, end= 33, dynamic= True)  
df [['Média leite mensal','dados de previsão']].plot(figsize= (12,8))
print(df['dados de previsão'])

# dataframe opertations - pandas
import pandas as pd# plotting data - matplotlib
from matplotlib import pyplot as plt# time series - statsmodels 
import pandas.util.testing as tm
# Seasonality decomposition
from statsmodels.tsa.seasonal import seasonal_decompose
# holt winters 
# single exponential smoothing
from statsmodels.tsa.holtwinters import SimpleExpSmoothing   # double and triple exponential smoothing
from statsmodels.tsa.holtwinters import ExponentialSmoothing

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 0)
df.head()

forecast_data = pd.read_excel(next(iter(uploaded.keys())),sheet_name= 0,index_col='Meses',parse_dates=True)
forecast_data.index.freq = 'MS'

# Split into train and test set
X_test = forecast_data[-6:]
X_train = forecast_data[:33]
X_test1 = forecast_data[:6]


print(X_test);
print(X_train);
print(X_test1);

df.set_index('Meses',inplace=True)
df.head()
df.plot()

decomposition = seasonal_decompose(df['Média leite mensal'],model='multiplicative', freq=6)  
figure = plt.figure()  
figure = decomposition.plot()  
figure.set_size_inches(16, 9)

df.index.freq = 'MS'
m = 4
alpha = 1/(2*m)
df['HWES1'] = SimpleExpSmoothing(df['Média leite mensal']).fit(smoothing_level=alpha,optimized=False,use_brute=True).fittedvalues
df[['Média leite mensal','HWES1']].plot(title='Holt Winters Single Exponential Smoothing')

df['HWES2_ADD'] = ExponentialSmoothing(df['Média leite mensal'],trend='add').fit().fittedvalues
df['HWES2_MUL'] = ExponentialSmoothing(df['Média leite mensal'],trend='mul').fit().fittedvalues
df[['Média leite mensal','HWES2_ADD','HWES2_MUL']].plot(title='Holt Winters Double Exponential Smoothing: Additive and Multiplicative Trend')

df['HWES3_ADD'] = ExponentialSmoothing(df['Média leite mensal'],trend='add',seasonal='add',seasonal_periods=4).fit().fittedvalues
df['HWES3_MUL'] = ExponentialSmoothing(df['Média leite mensal'],trend='mul',seasonal='mul',seasonal_periods=4).fit().fittedvalues
df[['Média leite mensal','HWES3_ADD','HWES3_MUL']].plot(title='Holt Winters Triple Exponential Smoothing: Additive and Multiplicative Seasonality')

fitted_model = ExponentialSmoothing(X_train['Média leite mensal'],trend='mul',seasonal='mul',seasonal_periods=6).fit()
test_predictions = fitted_model.forecast(6)
X_train['Média leite mensal'].plot(legend=True,label='TREINAMENTO')
X_test['Média leite mensal'].plot(legend=True,label='TESTE',figsize=(6,4))
test_predictions.plot(legend=True,label='PREDIÇÃO')
plt.title('Train, Test and Predicted Test using Holt Winters')

X_test['Média leite mensal'].plot(legend=True,label='TESTE',figsize=(9,6))
test_predictions.plot(legend=True,label='PREDIÇÃO',xlim=['01-10-2021','01-03-2022'])
print(test_predictions)

from sklearn.metrics import mean_absolute_error,mean_squared_error

print(f'Erro Médio Absoluto = {mean_absolute_error(X_test,test_predictions)}')
print(f'Erro Quadrático Médio = {mean_squared_error(X_test,test_predictions)}')

fitted_model = ExponentialSmoothing(X_train['Média leite mensal'],trend='mul',seasonal='mul',seasonal_periods=6).fit()
test_predictions = fitted_model.forecast(6)
X_train['Média leite mensal'].plot(legend=True,label='TREINAMENTO')
X_test1['Média leite mensal'].plot(legend=True,label='TESTE',figsize=(6,4))
test_predictions.plot(legend=True,label='PREDIÇÃO')
plt.title('Train, Test and Predicted Test using Holt Winters')

X_test1['Média leite mensal'].plot(legend=True,label='TESTE',figsize=(9,6))
test_predictions.plot(legend=True,label='PREDIÇÃO',xlim=['01-10-2021','01-03-2021'])
print(test_predictions)

from sklearn.metrics import mean_absolute_error,mean_squared_error

print(f'Erro Médio Absoluto = {mean_absolute_error(X_test1,test_predictions)}')
print(f'Erro Quadrático Médio = {mean_squared_error(X_test1,test_predictions)}')

import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
from statsmodels.graphics import tsaplots

def label(ax, string):
    ax.annotate(string, (1, 1), xytext=(-8, -8), ha='right', va='top',
                size=14, xycoords='axes fraction', textcoords='offset points')

np.random.seed(1977)
data = np.random.normal(0, 1, 100).cumsum()

fig, axes = plt.subplots(nrows=4, figsize=(8, 12))
fig.tight_layout()

axes[0].plot(data)
label(axes[0], 'Raw Data')

axes[1].acorr(data, maxlags=data.size-1)
label(axes[1], 'Matplotlib Autocorrelation')

tsaplots.plot_acf(data, axes[2])
label(axes[2], 'Statsmodels Autocorrelation')

pd.tools.plotting.autocorrelation_plot(data, ax=axes[3])
label(axes[3], 'Pandas Autocorrelation')

# Remove some of the titles and labels that were automatically added
for ax in axes.flat:
    ax.set(title='', xlabel='')
plt.show()
